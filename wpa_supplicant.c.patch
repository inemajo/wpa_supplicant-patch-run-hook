--- wpa_supplicant/wpa_supplicant.c.old	2013-04-26 23:26:29.628648631 +0200
+++ wpa_supplicant/wpa_supplicant.c	2013-05-02 13:48:57.246395713 +0200
@@ -509,6 +509,80 @@
 }
 
 
+/* for wpa_supplicant_call_event will be change */
+void		copy_env(char **env, int i, const char *key, const char *value)
+{
+  int		keylen;
+
+  keylen = strlen(key);
+  env[i] = os_realloc(env[i], sizeof(char) * (1 + keylen + strlen(value)));
+  strncpy(env[i], key, keylen);
+  strcpy(env[i] + keylen, value);
+}
+
+/**
+ * wpa_supplicant_call_event - Call event file for current connection state
+ * @wpa_s: Pointer to wpa_supplicant data
+ * @state: The new connection state
+ *
+ * This function is called whenever the connection state changes, e.g.,
+ * association is completed for WPA/WPA2 4-Way Handshake is started.
+ */
+
+void			wpa_supplicant_call_event(struct wpa_supplicant *wpa_s,
+				  enum wpa_states state)
+{
+  struct wpa_exec	*exe;
+  struct wpa_ssid	*s_ssid;
+  int			i;
+  int			len;
+
+  s_ssid = wpa_s->current_ssid;
+  exe = &(wpa_s->global->event_exec);
+
+  exe->argv[0] = os_realloc(exe->argv[0], strlen(wpa_s->conf->event_path)+1);
+  strcpy(exe->argv[0], wpa_s->conf->event_path);
+
+  i = exe->wpas_env_size;
+
+  copy_env(exe->env, i++, "WPAS_IFNAME=", wpa_s->ifname);
+  copy_env(exe->env, i++, "WPAS_STATE=", wpa_supplicant_state_txt(state));
+
+  switch (state) {
+
+  case WPA_COMPLETED:
+    copy_env(exe->env, i++, "WPAS_SSID=", s_ssid->ssid);
+    copy_env(exe->env, i++, "WPAS_REAUTH=", wpa_s->reassociated_connection ? 
+	     "1" : "0");
+  
+    exe->env[i] = os_realloc(exe->env[i], sizeof(char) * (sizeof("WPAS_MAC=") + 17));
+    sprintf(exe->env[i], "WPAS_MAC=" MACSTR , MAC2STR(wpa_s->bssid));
+    ++i;
+
+    if (s_ssid->id < 10) len = 1;
+    else if (s_ssid->id < 100) len = 2;
+    else for (len = 2; len * 10 > s_ssid->id; len++);
+    exe->env[i] = os_realloc(exe->env[i], sizeof(char) * (len + sizeof("WPAS_ID=")));
+    sprintf(exe->env[i], "WPAS_ID=%d", s_ssid->id);
+    ++i;
+
+    break;
+  }
+
+  exe->env[i] = NULL;
+  if (access(exe->argv[0], X_OK|F_OK) == -1) {
+    wpa_msg(wpa_s, MSG_ERROR, "file \"%s\" doesn't exist or haven't permission", exe->argv[0]);
+  }
+  else {
+    if (fork() == 0) {
+    execve(exe->argv[0], exe->argv, exe->env);
+    perror("wpa_supplicant_call_event, execve:");
+    exit(0);
+    }
+  }
+
+}
+
 /**
  * wpa_supplicant_set_state - Set current connection state
  * @wpa_s: Pointer to wpa_supplicant data
@@ -526,6 +600,9 @@
 		   wpa_supplicant_state_txt(wpa_s->wpa_state),
 		   wpa_supplicant_state_txt(state));
 
+	if (wpa_s->conf->event_path != NULL)
+	  wpa_supplicant_call_event(wpa_s, state);
+
 	if (state != WPA_SCANNING)
 		wpa_supplicant_notify_scanning(wpa_s, 0);
 
@@ -581,6 +658,7 @@
 			"received", sig);
 	}
 	wpa_supplicant_terminate_proc(global);
+	/*inemajo ici*/
 }
 
 
@@ -2227,6 +2305,54 @@
 	return NULL;
 }
 
+void		wpa_supplicant_init_exec(struct wpa_global *global)
+{
+  extern char	**environ;
+  int		environ_size;
+  int		i;
+  int		len;
+
+  global->event_exec.argv[0] = NULL;
+  global->event_exec.argv[1] = NULL;
+
+  for (environ_size = 0; environ[environ_size] != NULL; environ_size++);
+  global->event_exec.wpas_env_size = environ_size;
+
+  /* max = 6 + 1 */
+  global->event_exec.env = os_zalloc((environ_size + 7) * sizeof(char **));
+
+  for (i = 0 ; i != environ_size ; i++) {
+    len = strlen(environ[i]);
+    global->event_exec.env[i] = os_zalloc(len * sizeof(char *));
+    strcpy(global->event_exec.env[i], environ[i]);
+  }
+  
+  memset(global->event_exec.env + environ_size, 0, sizeof(char **) * 7);
+}
+
+void		wpa_supplicant_deinit_exec(struct wpa_exec *exe)
+{
+  int		i;
+
+  printf("coucou-------------------------------------------\n");
+  if (exe->env != NULL) {
+    for (i = 0 ; i != exe->wpas_env_size ; i++)
+      os_free(exe->env[i]);
+
+    printf("coucou---------------------------------------\n");
+    while (i != (exe->wpas_env_size + 7)) {
+      if (exe->env[i] != NULL)
+	os_free(exe->env[i]);
+      ++i;
+    }
+
+    os_free(exe->env);
+  }
+
+  if (exe->argv[0] != NULL)
+    os_free(exe->argv[0]);
+}
+
 
 /**
  * wpa_supplicant_init - Initialize %wpa_supplicant
@@ -2261,6 +2387,9 @@
 	global = os_zalloc(sizeof(*global));
 	if (global == NULL)
 		return NULL;
+
+	wpa_supplicant_init_exec(global);
+
 	global->params.daemonize = params->daemonize;
 	global->params.wait_for_monitor = params->wait_for_monitor;
 	global->params.dbus_ctrl_interface = params->dbus_ctrl_interface;
@@ -2404,6 +2533,8 @@
 	os_free(global->params.override_driver);
 	os_free(global->params.override_ctrl_interface);
 
+	wpa_supplicant_deinit_exec(&(global->event_exec));
+
 	os_free(global);
 	wpa_debug_close_syslog();
 	wpa_debug_close_file();
